"""
Author: Sijie Hu
Date: 18/03/2024
Description: This script adapted from mmdet.formatting.py to contain functions for collecting and formatting disparity data.
== Class `YOLOObjectDetection_MM` is the multimodal counterpart of class `YOLOObjectDetection` in object_detection.py. ==
Notes: Currently, only support transforms for YOLOX, you should take
    care of `create_input` for other transforms.
"""

import sys
from typing import Union, Sequence, Optional, Tuple, Dict, List

import torch
from mmengine import Config
from mmengine.model import BaseDataPreprocessor
from mmengine.registry import Registry
from mmdeploy.utils import Task
from mmdeploy.utils.config_utils import (get_backend, get_input_shape,
                                         is_dynamic_shape)

from mmdeploy.codebase.mmdet.deploy import ObjectDetection_MM
from .object_detection import _get_dataset_metainfo, MMYOLO_TASK


@MMYOLO_TASK.register_module(Task.OBJECT_DETECTION_MM.value)
class YOLOObjectDetection_MM(ObjectDetection_MM):

    def get_visualizer(self, name: str, save_dir: str):
        """Get visualizer.

        Args:
            name (str): Name of visualizer.
            save_dir (str): Directory to save visualization results.

        Returns:
            Visualizer: A visualizer instance.
        """
        from mmdet.visualization import DetLocalVisualizer  # noqa: F401,F403
        metainfo = _get_dataset_metainfo(self.model_cfg)
        visualizer = super().get_visualizer(name, save_dir)
        if metainfo is not None:
            visualizer.dataset_meta = metainfo
        return visualizer

    def build_pytorch_model(self,
                            model_checkpoint: Optional[str] = None,
                            cfg_options: Optional[Dict] = None,
                            **kwargs) -> torch.nn.Module:
        """Initialize torch model.

        Args:
            model_checkpoint (str): The checkpoint file of torch model,
                defaults to `None`.
            cfg_options (dict): Optional config key-pair parameters.
        Returns:
            nn.Module: An initialized torch model generated by other OpenMMLab
                codebases.
        """
        from copy import deepcopy

        from mmengine.model import revert_sync_batchnorm
        from mmengine.registry import MODELS

        from mmyolo.utils import switch_to_deploy

        model = deepcopy(self.model_cfg.model)
        preprocess_cfg = deepcopy(self.model_cfg.get('preprocess_cfg', {}))
        preprocess_cfg.update(
            deepcopy(self.model_cfg.get('data_preprocessor', {})))
        model.setdefault('data_preprocessor', preprocess_cfg)
        model = MODELS.build(model)
        if model_checkpoint is not None:
            from mmengine.runner.checkpoint import load_checkpoint
            load_checkpoint(model, model_checkpoint, map_location=self.device)

        model = revert_sync_batchnorm(model)
        switch_to_deploy(model)
        model = model.to(self.device)
        model.eval()
        return model